import os
import zipfile
import tempfile
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    ContextTypes,
)
from universal_parser import process_word_files  # —Ç–≤–æ–π –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
import nest_asyncio

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =========================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Environment –Ω–∞ Render.")

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-—Ñ–∞–π–ª–æ–≤
# =========================
async def handle_zip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç ZIP –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–∞—Ä—Å–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel –æ–±—Ä–∞—Ç–Ω–æ."""
    user = update.message.from_user
    file = await update.message.document.get_file()

    await update.message.reply_text("üì¶ –ü–æ–ª—É—á–µ–Ω –∞—Ä—Ö–∏–≤, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    with tempfile.TemporaryDirectory() as tmpdir:
        zip_path = os.path.join(tmpdir, "input.zip")
        await file.download_to_drive(zip_path)

        try:
            with zipfile.ZipFile(zip_path, "r") as zip_ref:
                zip_ref.extractall(tmpdir)
        except zipfile.BadZipFile:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP-–∞—Ä—Ö–∏–≤–æ–º.")
            return

        # –ü–∞–ø–∫–∞ —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        files = [
            os.path.join(tmpdir, f)
            for f in os.listdir(tmpdir)
            if f.lower().endswith(".docx")
        ]
        if not files:
            await update.message.reply_text("‚ö†Ô∏è –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ Word (.docx)")
            return

        await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...")

        # –ó–∞–ø—É—Å–∫ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        try:
            output_path = os.path.join(tmpdir, f"result_{user.id}.xlsx")
            process_word_files(files, output_path)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π Excel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_document(
            document=open(output_path, "rb"),
            filename=f"parsed_{user.id}.xlsx",
            caption="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!"
        )

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# =========================
async def handle_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì© –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ Word (.docx) –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")

# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# =========================
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-—Ñ–∞–π–ª–æ–≤
    app.add_handler(MessageHandler(filters.Document.ZIP, handle_zip))
    # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    app.add_handler(MessageHandler(filters.ALL, handle_other))

    await app.run_polling()

# =========================
# –ó–∞–ø—É—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Render
# =========================
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
