import os
import zipfile
import tempfile
import asyncio
import logging
import subprocess
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv

# ==========================================================
# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==========================================================

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

load_dotenv()  # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")  # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ Environment –Ω–∞ Render.")

# ==========================================================
# üöÄ –ö–æ–º–∞–Ω–¥—ã
# ==========================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ ZIP-—Ñ–∞–π–ª —Å –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏ (.docx), "
        "–∏ —è –ø—Ä–∏—à–ª—é Excel-—Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ üìä"
    )

# ==========================================================
# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-—Ñ–∞–π–ª–æ–≤
# ==========================================================

async def handle_zip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = update.message.document
        if not file.file_name.endswith(".zip"):
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å ZIP-—Ñ–∞–π–ª.")
            return

        await update.message.reply_text("üìÇ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã ‚è≥")

        # —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as tmpdir:
            zip_path = os.path.join(tmpdir, file.file_name)

            # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            new_file = await file.get_file()
            await new_file.download_to_drive(zip_path)

            # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º zip
            with zipfile.ZipFile(zip_path, "r") as zip_ref:
                zip_ref.extractall(tmpdir)

            # –∑–∞–ø—É—Å–∫–∞–µ–º universal_parser.py
            parser_path = os.path.join(os.getcwd(), "universal_parser.py")
            result = subprocess.run(["python", parser_path], cwd=tmpdir, capture_output=True, text=True)

            logging.info(f"Parser output: {result.stdout}")
            if result.returncode != 0:
                raise Exception(result.stderr)

            # –∏—â–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
            output_file = os.path.join(os.path.expanduser("~"), "Desktop", "–ò–¢–û–ì.xlsx")
            if not os.path.exists(output_file):
                output_file = os.path.join(tmpdir, "–ò–¢–û–ì.xlsx")

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_document(InputFile(output_file, filename="–ò–¢–û–ì.xlsx"))
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

# ==========================================================
# ‚öôÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ==========================================================

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_zip))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
