import sys
sys.dont_write_bytecode = True  # üö´ –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ __pycache__ –∏ .pyc —Ñ–∞–π–ª–æ–≤

import os
import re
from docx import Document
import pandas as pd
from tkinter import Tk, filedialog
from openpyxl import load_workbook
from openpyxl.styles import Border, Side, Alignment, PatternFill

# ======================================================
# üåç –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò
# ======================================================

TRANSLIT_TABLE = str.maketrans({
    "–ê": "A", "–ë": "B", "–í": "V", "–ì": "G", "–î": "D",
    "–ï": "E", "–Å": "YO", "–ñ": "ZH", "–ó": "Z", "–ò": "I",
    "–ô": "Y", "–ö": "K", "–õ": "L", "–ú": "M", "–ù": "N",
    "–û": "O", "–ü": "P", "–†": "R", "–°": "S", "–¢": "T",
    "–£": "U", "–§": "F", "–•": "KH", "–¶": "TS", "–ß": "CH",
    "–®": "SH", "–©": "SHCH", "–™": "", "–´": "Y", "–¨": "",
    "–≠": "E", "–Æ": "YU", "–Ø": "YA"
})

def transliterate(text: str) -> str:
    if not text:
        return ""
    return " ".join([p.upper().translate(TRANSLIT_TABLE).capitalize() for p in text.split()])

def clean_text(text: str) -> str:
    return re.sub(r"\s+", " ", text.replace("\xa0", " ")).strip()

def format_excel(filepath):
    wb = load_workbook(filepath)
    ws = wb.active

    border = Border(
        left=Side(style='thin'), right=Side(style='thin'),
        top=Side(style='thin'), bottom=Side(style='thin')
    )
    yellow = PatternFill(start_color="FFF9C4", end_color="FFF9C4", fill_type="solid")

    headers = [c.value for c in ws[1]]
    surname_col = headers.index("–§–∞–º–∏–ª–∏—è (–∞–Ω–≥–ª)") + 1 if "–§–∞–º–∏–ª–∏—è (–∞–Ω–≥–ª)" in headers else None
    name_col = headers.index("–ò–º—è (–∞–Ω–≥–ª)") + 1 if "–ò–º—è (–∞–Ω–≥–ª)" in headers else None

    for row in ws.iter_rows():
        for cell in row:
            cell.border = border
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            if cell.column in [surname_col, name_col]:
                cell.fill = yellow

    for col in ws.columns:
        max_len = max(len(str(c.value)) if c.value else 0 for c in col)
        ws.column_dimensions[col[0].column_letter].width = max_len + 3

    wb.save(filepath)

def extract_text_from_docx(doc):
    text = []
    for p in doc.paragraphs:
        if p.text.strip():
            text.append(p.text)
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                if cell.text.strip():
                    text.append(cell.text)
    return clean_text(" ".join(text))

# ======================================================
# üá≤üá≤ –ü–ê–†–°–ï–† –ú–¨–Ø–ù–ú–ê
# ======================================================

MONTHS = {
    "–Ø–ù–í–ê–†–Ø": "01", "–§–ï–í–†–ê–õ–Ø": "02", "–ú–ê–†–¢–ê": "03", "–ê–ü–†–ï–õ–Ø": "04",
    "–ú–ê–Ø": "05", "–ò–Æ–ù–Ø": "06", "–ò–Æ–õ–Ø": "07", "–ê–í–ì–£–°–¢–ê": "08",
    "–°–ï–ù–¢–Ø–ë–†–Ø": "09", "–û–ö–¢–Ø–ë–†–Ø": "10", "–ù–û–Ø–ë–†–Ø": "11", "–î–ï–ö–ê–ë–†–Ø": "12"
}

def convert_date(date_str: str) -> str:
    if not date_str:
        return ""
    match = re.search(r"(\d{1,2})\s+([–ê-–Ø–∞-—è]+)\s+(\d{4})", date_str)
    if match:
        day, month_word, year = match.groups()
        month = MONTHS.get(month_word.upper(), "??")
        return f"{int(day):02d}.{month}.{year}"
    return ""

def extract_myanmar_data(doc_path, log):
    try:
        doc = Document(doc_path)
        text = extract_text_from_docx(doc)
        data = {"–§–∞–π–ª": os.path.basename(doc_path), "–°—Ç—Ä–∞–Ω–∞": "–ú—å—è–Ω–º–∞"}

        name_match = re.search(r"–ò–º—è\s+([–ê-–ØA-Z–Å–Ü–á–Ñ–∞-—è—ë—ñ—ó—î\s]+?)\s+–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", text, re.IGNORECASE)
        name_ru = clean_text(name_match.group(1)) if name_match else ""
        name_en = transliterate(name_ru)

        birth_match = re.search(r"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\s+(\d{1,2}\s+[–ê-–Ø–∞-—è]+\s+\d{4})", text)
        birth_date = convert_date(birth_match.group(1)) if birth_match else ""

        gender_match = re.search(r"–ü–æ–ª\s*([–ú–ñ])", text)
        gender = gender_match.group(1) if gender_match else ""
        birthplace_match = re.search(r"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\s,]+?)\s+–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", text)
        birthplace = re.sub(r"^[–ú–ñ]\s+", "", birthplace_match.group(1)).strip() if birthplace_match else ""

        passport_match = re.search(r"\b([A-Z–ê-–Ø]{1,2}\d{6,})\b", text)
        passport_number = passport_match.group(1).upper() if passport_match else ""

        issued_match = re.search(r"–û—Ä–≥–∞–Ω –≤—ã–¥–∞—á–∏\s+(.+?)\s+–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ", text)
        issued_raw = clean_text(issued_match.group(1)) if issued_match else ""
        issued_raw = issued_raw.replace("–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ", "").strip()

        date_match = re.search(r"(\d{1,2}\s+[–ê-–Ø–∞-—è]+\s+\d{4})", issued_raw)
        issue_date = convert_date(date_match.group(1)) if date_match else ""
        issued_by = re.sub(r"\d{1,2}\s+[–ê-–Ø–∞-—è]+\s+\d{4}", "", issued_raw).strip(" ,")

        expiry_match = re.search(r"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ\s+(\d{1,2}\s+[–ê-–Ø–∞-—è]+\s+\d{4})", text)
        expiry_date = convert_date(expiry_match.group(1)) if expiry_match else ""

        data.update({
            "–§–∞–º–∏–ª–∏—è (—Ä—É—Å)": "",
            "–§–∞–º–∏–ª–∏—è (–∞–Ω–≥–ª)": "",
            "–ò–º—è (—Ä—É—Å)": name_ru,
            "–ò–º—è (–∞–Ω–≥–ª)": name_en,
            "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": birth_date,
            "–ü–æ–ª": gender,
            "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": passport_number,
            "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏": issue_date,
            "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ": expiry_date,
            "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è": birthplace,
            "–ö–µ–º –≤—ã–¥–∞–Ω": issued_by
        })
        return data
    except Exception as e:
        log.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {os.path.basename(doc_path)} (–ú—å—è–Ω–º–∞): {e}")
        return None

# ======================================================
# üáπüá≤ –ü–ê–†–°–ï–† –¢–£–†–ö–ú–ï–ù–ò–°–¢–ê–ù
# ======================================================

def extract_turkmenistan_data(doc_path, log):
    try:
        from parser_v5 import surname_dict, name_dict
    except:
        surname_dict = {}
        name_dict = {}

    try:
        doc = Document(doc_path)
        lines = []
        for p in doc.paragraphs:
            t = clean_text(p.text)
            if t:
                lines.append(t)
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    t = clean_text(cell.text)
                    if t:
                        lines.append(t)

        def get_value(lines, key):
            for i, line in enumerate(lines):
                if key.lower() in line.lower():
                    for j in range(i + 1, len(lines)):
                        val = clean_text(lines[j])
                        if val:
                            return val
            return ""

        data = {"–§–∞–π–ª": os.path.basename(doc_path), "–°—Ç—Ä–∞–Ω–∞": "–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω"}

        passport_number = ""
        for i, line in enumerate(lines):
            if "–Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞" in line.lower():
                window = lines[max(0, i - 3): min(len(lines), i + 4)]
                for segment in window:
                    match = re.search(r"[A-Z–ê-–Ø]\d{6,}", segment)
                    if match:
                        passport_number = match.group(0)
                        break
                break
        if not passport_number:
            for line in lines:
                match = re.search(r"[A-Z–ê-–Ø]\d{6,}", line)
                if match:
                    passport_number = match.group(0)
                    break

        surname_ru = get_value(lines, "–§–∞–º–∏–ª–∏—è")
        name_ru = get_value(lines, "–ò–º—è")

        surname_en = surname_dict.get(surname_ru, transliterate(surname_ru))
        name_en = name_dict.get(name_ru, transliterate(name_ru))

        combined = get_value(lines, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
        date_match = re.search(r"\d{2}\.\d{2}\.\d{4}", combined)
        gender = ""
        if date_match:
            birth_date = date_match.group(0)
            rest = combined.replace(birth_date, "").strip()
            if "–º—É–∂" in rest.lower():
                gender = "–ú"
            elif "–∂–µ–Ω" in rest.lower():
                gender = "–ñ"
        else:
            birth_date = combined

        issued_by = get_value(lines, "–û—Ä–≥–∞–Ω,  –≤—ã–¥–∞–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç") or get_value(lines, "–û—Ä–≥–∞–Ω, –≤—ã–¥–∞–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç")
        issued_by = issued_by.strip()

        if re.search(r"\b–≥–º—Å—Ç\b", issued_by.lower()) or "–º–∏–≥—Ä–∞—Ü" in issued_by.lower():
            issued_by = "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞ –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω–∞"

        data.update({
            "–§–∞–º–∏–ª–∏—è (—Ä—É—Å)": surname_ru,
            "–§–∞–º–∏–ª–∏—è (–∞–Ω–≥–ª)": surname_en,
            "–ò–º—è (—Ä—É—Å)": name_ru,
            "–ò–º—è (–∞–Ω–≥–ª)": name_en,
            "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": birth_date,
            "–ü–æ–ª": gender,
            "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": passport_number,
            "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏": get_value(lines, "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏"),
            "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ": get_value(lines, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"),
            "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è": get_value(lines, "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è"),
            "–ö–µ–º –≤—ã–¥–∞–Ω": issued_by
        })
        return data
    except Exception as e:
        log.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {os.path.basename(doc_path)} (–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω): {e}")
        return None

# ======================================================
# ‚ú® –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê
# ======================================================

def normalize_data(df):
    def capitalize_text(x, column_name):
        if isinstance(x, str):
            if column_name == "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞":
                return x.strip().upper()
            return " ".join(word.capitalize() for word in x.strip().split())
        return x

    for col in df.columns:
        df[col] = df[col].apply(lambda v: capitalize_text(v, col))
    return df

# ======================================================
# üöÄ –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö
# ======================================================

def main():
    Tk().withdraw()
    folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏")
    if not folder:
        print("üö´ –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return

    results, log = [], []

    for file in os.listdir(folder):
        if not file.lower().endswith(".docx"):
            continue
        file_path = os.path.join(folder, file)
        try:
            doc = Document(file_path)
            text = extract_text_from_docx(doc)
        except:
            continue

        if "–º—å—è–Ω–º" in text.lower() or "myanmar" in text.lower():
            data = extract_myanmar_data(file_path, log)
        else:
            data = extract_turkmenistan_data(file_path, log)

        if data:
            results.append(data)

    if not results:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return

    df = pd.DataFrame(results)
    cols = ["–§–∞–º–∏–ª–∏—è (—Ä—É—Å)", "–§–∞–º–∏–ª–∏—è (–∞–Ω–≥–ª)", "–ò–º—è (—Ä—É—Å)", "–ò–º—è (–∞–Ω–≥–ª)",
            "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞", "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ",
            "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ö–µ–º –≤—ã–¥–∞–Ω", "–°—Ç—Ä–∞–Ω–∞", "–ü–æ–ª"]
    df = df.reindex(columns=cols)

    df = normalize_data(df)

    out = os.path.join(os.path.expanduser("~"), "Desktop", "–ò–¢–û–ì.xlsx")
    df.to_excel(out, index=False)
    format_excel(out)

    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {out}")
    if log:
        print("‚ö†Ô∏è –õ–æ–≥–∏ –æ—à–∏–±–æ–∫:")
        for e in log:
            print(e)

if __name__ == "__main__":
    main()
